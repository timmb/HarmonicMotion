//
//  Node.h
//  HarmonicMotion
//
//  Created by Tim Murray-Browne on 25/09/2013.
//  Copyright (c) 2013 Tim Murray-Browne. All rights reserved.
//

#pragma once

#include "Data.h"
#include <boost/thread.hpp>
#include <atomic>
#include <set>

namespace hm
{
	class Node;
	typedef std::shared_ptr<Node> NodePtr;
	
	class Inlet;
	
	class Node
	{
	public:
		/// Universal settings for all nodes. Derived classes should override
		/// this struct with their own parameters
		struct Params
		{
			/// Name of the node. Will be autogenerated if left blank. All
			/// nodes must have a unique name.
			std::string name;
			
			Params(std::string const& name_="")
			: name(name_) {}
			virtual ~Params() {}
		};
		
		virtual ~Node();
		std::string type() const { return mClassName; }
		
		/// Starts the thread
		void start();
		/// Thread is running
		bool isRunning() const { return mThreadIsRunning; }
		
		InletPtr inlet(int index);
		OutletPtr outlet(int index);
		
		std::string toString() const;
		/// Disconnects any callbacks this node has registered with its
		/// inlets.
		/// This is used by the destructor and also by Pipeline to allow
		/// Nodes to be destroyed in an arbitrary order without any
		/// callbacks attempting to contact destroyed nodes
		void disconnectAllCallbacks();
		
		std::string name() const { return nodeParams().name; }
		
	protected:
		/// Nodes cannot be directly constructed as they are always
		/// subclassed.
		Node(Params const& params, std::string const& className);
		
		/// Cannot be called after start() has been called
		InletPtr createInlet(Types types, std::string name, std::string helpText="");
		/// Cannot be called after start() has been called
		OutletPtr createOutlet(Types types, std::string name, std::string helpText="");
		
		/// \return true if new data arrived. Otherwise, derived
		/// class should check to see whether it should close
		/// and then recall this function if good to continue.
		/// New data is defined as one or more inlets having
		/// new data.
		/// \param inlet Which inlet to wait for, or -1 for any inlet
		bool waitForNewData(int inlet=-1) const;
		
		/// Override this: Process incoming data until isRequestedToStop()
		/// becomes true
		virtual void run() = 0;
		/// Return from run() at the earliest opportunity when this
		/// becomes false. The Node may or may not be started again after
		/// it stops.
		bool isRequestedToStop() const { return mThreadIsRequestedToStop; }
		/// This function must be called in the derived class's destructor
		/// to ensure the thread ends before the derived class's member variables
		/// are destroyed. It will block until thread closes or it times out.
		/// (currently set at 2 seconds).
		void stopAndWait();
		
		Params nodeParams() const;
		void setNodeParams(Params const& params);
		
	private:
		/// Callback for inlets
		void callbackNewInletData();
		/// Callback for when the thread ends
		void callbackThreadEnded();
		/// Function run by the thread. Delegates to run()
		void threadFunction();
		
		
		
		/// An inlet notified of new data. Used by waitForNewData and the callback above
		std::vector<InletPtr> mInlets;
		std::vector<OutletPtr> mOutlets;
		mutable boost::shared_mutex mParamsMutex_;
		mutable bool mWasNotified;
		mutable boost::mutex mWasNotifiedMutex;
		mutable boost::condition_variable mWasNotifiedWaitCondition;
		std::atomic<bool> mThreadIsRequestedToStop;
		bool mStartHasBeenCalled;
		
		std::atomic<bool> mThreadIsRunning;
		std::unique_ptr<boost::thread> mThread;
		
		static std::set<std::string> sNamesInUse;

		const std::string mClassName;
		Params mParams_;
	};
}